/*
 * This file is generated by jOOQ.
 */
package generated.tables;


import java.math.BigDecimal;
import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;

import generated.Indexes;
import generated.Keys;
import generated.Moneytransfer;
import generated.tables.records.AccounttransactionsRecord;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.11.9"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Accounttransactions extends TableImpl<AccounttransactionsRecord> {

    private static final long serialVersionUID = 6971391;

    /**
     * The reference instance of <code>moneytransfer.accounttransactions</code>
     */
    public static final Accounttransactions ACCOUNTTRANSACTIONS = new Accounttransactions();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<AccounttransactionsRecord> getRecordType() {
        return AccounttransactionsRecord.class;
    }

    /**
     * The column <code>moneytransfer.accounttransactions.ID</code>.
     */
    public final TableField<AccounttransactionsRecord, Integer> ID = createField("ID", org.jooq.impl.SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>moneytransfer.accounttransactions.AccountID</code>.
     */
    public final TableField<AccounttransactionsRecord, Integer> ACCOUNTID = createField("AccountID", org.jooq.impl.SQLDataType.INTEGER, this, "");

    /**
     * The column <code>moneytransfer.accounttransactions.Amount</code>.
     */
    public final TableField<AccounttransactionsRecord, BigDecimal> AMOUNT = createField("Amount", org.jooq.impl.SQLDataType.DECIMAL(10, 3), this, "");

    /**
     * The column <code>moneytransfer.accounttransactions.Message</code>.
     */
    public final TableField<AccounttransactionsRecord, String> MESSAGE = createField("Message", org.jooq.impl.SQLDataType.VARCHAR(1000), this, "");

    /**
     * Create a <code>moneytransfer.accounttransactions</code> table reference
     */
    public Accounttransactions() {
        this(DSL.name("accounttransactions"), null);
    }

    /**
     * Create an aliased <code>moneytransfer.accounttransactions</code> table reference
     */
    public Accounttransactions(String alias) {
        this(DSL.name(alias), ACCOUNTTRANSACTIONS);
    }

    /**
     * Create an aliased <code>moneytransfer.accounttransactions</code> table reference
     */
    public Accounttransactions(Name alias) {
        this(alias, ACCOUNTTRANSACTIONS);
    }

    private Accounttransactions(Name alias, Table<AccounttransactionsRecord> aliased) {
        this(alias, aliased, null);
    }

    private Accounttransactions(Name alias, Table<AccounttransactionsRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> Accounttransactions(Table<O> child, ForeignKey<O, AccounttransactionsRecord> key) {
        super(child, key, ACCOUNTTRANSACTIONS);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Moneytransfer.MONEYTRANSFER;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.ACCOUNTTRANSACTIONS_FK_ACCTR_ACC_ID, Indexes.ACCOUNTTRANSACTIONS_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<AccounttransactionsRecord, Integer> getIdentity() {
        return Keys.IDENTITY_ACCOUNTTRANSACTIONS;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<AccounttransactionsRecord> getPrimaryKey() {
        return Keys.KEY_ACCOUNTTRANSACTIONS_PRIMARY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<AccounttransactionsRecord>> getKeys() {
        return Arrays.<UniqueKey<AccounttransactionsRecord>>asList(Keys.KEY_ACCOUNTTRANSACTIONS_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<ForeignKey<AccounttransactionsRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<AccounttransactionsRecord, ?>>asList(Keys.FK_ACCTR_ACC_ID);
    }

    public Account account() {
        return new Account(this, Keys.FK_ACCTR_ACC_ID);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Accounttransactions as(String alias) {
        return new Accounttransactions(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Accounttransactions as(Name alias) {
        return new Accounttransactions(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Accounttransactions rename(String name) {
        return new Accounttransactions(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Accounttransactions rename(Name name) {
        return new Accounttransactions(name, null);
    }
}
