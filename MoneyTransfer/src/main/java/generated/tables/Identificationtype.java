/*
 * This file is generated by jOOQ.
 */
package generated.tables;


import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;

import generated.Indexes;
import generated.Keys;
import generated.Moneytransfer;
import generated.tables.records.IdentificationtypeRecord;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.11.9"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Identificationtype extends TableImpl<IdentificationtypeRecord> {

    private static final long serialVersionUID = 35256109;

    /**
     * The reference instance of <code>moneytransfer.identificationtype</code>
     */
    public static final Identificationtype IDENTIFICATIONTYPE = new Identificationtype();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<IdentificationtypeRecord> getRecordType() {
        return IdentificationtypeRecord.class;
    }

    /**
     * The column <code>moneytransfer.identificationtype.ID</code>.
     */
    public final TableField<IdentificationtypeRecord, Short> ID = createField("ID", org.jooq.impl.SQLDataType.SMALLINT.nullable(false).identity(true), this, "");

    /**
     * The column <code>moneytransfer.identificationtype.Name</code>.
     */
    public final TableField<IdentificationtypeRecord, String> NAME = createField("Name", org.jooq.impl.SQLDataType.VARCHAR(100), this, "");

    /**
     * Create a <code>moneytransfer.identificationtype</code> table reference
     */
    public Identificationtype() {
        this(DSL.name("identificationtype"), null);
    }

    /**
     * Create an aliased <code>moneytransfer.identificationtype</code> table reference
     */
    public Identificationtype(String alias) {
        this(DSL.name(alias), IDENTIFICATIONTYPE);
    }

    /**
     * Create an aliased <code>moneytransfer.identificationtype</code> table reference
     */
    public Identificationtype(Name alias) {
        this(alias, IDENTIFICATIONTYPE);
    }

    private Identificationtype(Name alias, Table<IdentificationtypeRecord> aliased) {
        this(alias, aliased, null);
    }

    private Identificationtype(Name alias, Table<IdentificationtypeRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> Identificationtype(Table<O> child, ForeignKey<O, IdentificationtypeRecord> key) {
        super(child, key, IDENTIFICATIONTYPE);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Moneytransfer.MONEYTRANSFER;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.IDENTIFICATIONTYPE_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<IdentificationtypeRecord, Short> getIdentity() {
        return Keys.IDENTITY_IDENTIFICATIONTYPE;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<IdentificationtypeRecord> getPrimaryKey() {
        return Keys.KEY_IDENTIFICATIONTYPE_PRIMARY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<IdentificationtypeRecord>> getKeys() {
        return Arrays.<UniqueKey<IdentificationtypeRecord>>asList(Keys.KEY_IDENTIFICATIONTYPE_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identificationtype as(String alias) {
        return new Identificationtype(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identificationtype as(Name alias) {
        return new Identificationtype(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Identificationtype rename(String name) {
        return new Identificationtype(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Identificationtype rename(Name name) {
        return new Identificationtype(name, null);
    }
}
